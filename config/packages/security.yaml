security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
<<<<<<< HEAD
=======

>>>>>>> 5a7565d83818f1db89ef814a2b2e450ef201f481
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
<<<<<<< HEAD
=======

        users_in_memory: { memory: null }

>>>>>>> 5a7565d83818f1db89ef814a2b2e450ef201f481
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
<<<<<<< HEAD
=======

>>>>>>> 5a7565d83818f1db89ef814a2b2e450ef201f481
            provider: app_user_provider
            custom_authenticator: App\Security\AppUserAuthentificatorAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
<<<<<<< HEAD
                target: app_front
=======
                # target: app_any_route

            provider: users_in_memory

>>>>>>> 5a7565d83818f1db89ef814a2b2e450ef201f481

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
<<<<<<< HEAD
         - { path: ^/user, roles: ROLE_ADMIN }
         - { path: ^/profil, roles: ROLE_USER }
        
    role_hierarchy:
            ROLE_EXPERT: ROLE_MECANICIEN 
            ROLE_ASSUREUR  : ROLE_EXPERT 
            ROLE_USER: ROLE_ASSUREUR 
            ROLE_CLIENT: ROLE_USER
            ROLE_ADMIN: ROLE_CLIENT 
=======
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
>>>>>>> 5a7565d83818f1db89ef814a2b2e450ef201f481

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
